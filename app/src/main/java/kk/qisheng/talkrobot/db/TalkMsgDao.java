package kk.qisheng.talkrobot.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TALK_MSG".
*/
public class TalkMsgDao extends AbstractDao<TalkMsg, Void> {

    public static final String TABLENAME = "TALK_MSG";

    /**
     * Properties of entity TalkMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, int.class, "time", false, "TIME");
        public final static Property Who = new Property(1, int.class, "who", false, "WHO");
        public final static Property Msg = new Property(2, String.class, "msg", false, "MSG");
    }


    public TalkMsgDao(DaoConfig config) {
        super(config);
    }
    
    public TalkMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TALK_MSG\" (" + //
                "\"TIME\" INTEGER NOT NULL ," + // 0: time
                "\"WHO\" INTEGER NOT NULL ," + // 1: who
                "\"MSG\" TEXT);"); // 2: msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TALK_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TalkMsg entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
        stmt.bindLong(2, entity.getWho());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(3, msg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TalkMsg entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
        stmt.bindLong(2, entity.getWho());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(3, msg);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TalkMsg readEntity(Cursor cursor, int offset) {
        TalkMsg entity = new TalkMsg( //
            cursor.getInt(offset + 0), // time
            cursor.getInt(offset + 1), // who
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // msg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TalkMsg entity, int offset) {
        entity.setTime(cursor.getInt(offset + 0));
        entity.setWho(cursor.getInt(offset + 1));
        entity.setMsg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TalkMsg entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TalkMsg entity) {
        return null;
    }

    @Override
    public boolean hasKey(TalkMsg entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
